// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String  @unique
  password     String
  profileImage String?
  phone        String?
  address      String?
  points       Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]

  order Order[]
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  type String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  images      String[]
  stock       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
  likedId     String[] @db.ObjectId

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  order Order[]
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  owner     String      @db.ObjectId
  productId String      @db.ObjectId
  requester String      @db.ObjectId
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User?       @relation(fields: [requester], references: [id])
  userId    String?     @db.ObjectId
  product   Product     @relation(fields: [productId], references: [id])
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
